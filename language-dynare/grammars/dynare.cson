scopeName: 'dynare'
name: 'Dynare' # The title that will show up in grammar selection and on your status bar.
fileTypes: [ # An array of file extensions.
  'mod'
]
firstLineMatch: '' # A regular expression that is matched against the first line of the document when Atom is trying to decide if the grammar is appropriate. Useful for shell scripts, mostly.
foldingStartMarker: '' # A regular expression that checks for the start of a foldable area (such as `{`).
foldingStopMarker: '' # A regular expression that checks for the end of a foldable area (such as `}`). If both folding markers are matched in the same line, there will be no foldable area.
patterns: [ # An array of individual pattern declarations.
  {
    match: '\\b(var)\\b|\\b(varexo)\\b|\\b(parameters)\\b' # A regular expression that matches some content. Optional.
    name: 'syntax.keyword' # A period-delimited list of classes that will be applied to the content identified by `match`. Optional.
  }
  {
    match: '\\b(simul)\\b' # A regular expression that matches some content. Optional.
    name: 'syntax.keyword.syntax.other.syntax.special-method' # A period-delimited list of classes that will be applied to the content identified by `match`. Optional.
  }
  {
    match: '\\b(check)\\b|\\b(steady)\\b|\\b(stoch_simul)\\b' # A regular expression that matches some content. Optional.
    name: 'syntax.constant' # A period-delimited list of classes that will be applied to the content identified by `match`. Optional.
  }
  {
    match: '\\/\\/.*' # A regular expression that matches some content. Optional.
    name: 'syntax.comment' # A period-delimited list of classes that will be applied to the content identified by `match`. Optional.
  }
  {
    match: '\\b(alpha)\\b|\\b(beta)\\b|\\b(delta)\\b|\\b(gamma)\\b|\\b(rho)\\b|\\b(phi)\\b|\\b(psi)\\b|\\b(pi)\\b|\\b(sigma)\\b|\\b(theta)\\b|\\b(tau)\\b' # A regular expression that matches some content. Optional.
    name: 'syntax.variable' # A period-delimited list of classes that will be applied to the content identified by `match`. Optional.
  }
    {
      #match: '\\b(end;)\\b' # A regular expression that matches some content. Optional.
      #name: 'syntax.constant' # A period-delimited list of classes that will be applied to the content identified by `match`. Optional.
    }
    {
    'begin': '\\b(model)\\b'
    'beginCaptures':
      '1':
        'name': 'syntax.string'
    'end': '\\b(end)\\b'
    'endCaptures':
      '1':
        'name': 'syntax.string'
    'name': 'teste'
    'patterns': [
      {
        'include': '$self'
      }
      ]
    }
    {
    'begin': '\\b(initval)\\b'
    'beginCaptures':
      '1':
        'name': 'syntax.string'
    'end': '\\b(end)\\b'
    'endCaptures':
      '1':
        'name': 'syntax.string'
    'name': 'teste'
    'patterns': [
      {
        'include': '$self'
      }
      ]
    }
    {
    'begin': '\\b(endval)\\b'
    'beginCaptures':
      '1':
        'name': 'syntax.string'
    'end': '\\b(end)\\b'
    'endCaptures':
      '1':
        'name': 'syntax.string'
    'name': 'teste'
    'patterns': [
      {
        'include': '$self'
      }
      ]
    }
    {
    'begin': '\\b(shocks)\\b'
    'beginCaptures':
      '1':
        'name': 'syntax.string'
    'end': '\\b(end)\\b'
    'endCaptures':
      '1':
        'name': 'syntax.string'
    'name': 'teste'
    'patterns': [
      {
        'include': '$self'
      }
      {
        match:'\\b(periods)\\b|\\b(values)\\b'
        name:'syntax.string.syntax.regexp'
      }
      ]
    }
    {
    'begin': '\\/\\*'
    'end': '\\*\\/'
    'name': 'syntax.comment'
    'patterns': [
      {
        'include': '$self'
      }
      ]
    }
  {
    match: ''
    begin: ''
    end: ''
    name: ''
    contentName: ''
    captures:
      0:
        name: ''
    beginCaptures:
      0:
        name: ''
    endCaptures:
      0:
        name: ''
    include: ''
  }
]
repository: # An array of rules. If you're going to be referencing one bit of code over and over again, stick it here so that you can edit all in one place.
  ruleName: # Can be anything.
    {
      name: ''
      match: ''
      end: ''
      endCaptures:
        0:
          name: ''
}
